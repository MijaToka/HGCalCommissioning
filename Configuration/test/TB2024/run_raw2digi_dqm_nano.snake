import json
import os
import re

snakefile_dir = os.path.dirname(workflow.basedir)

cfgurl=workflow.config_settings.configfiles[0]
with open(cfgurl,'r') as cfg:
    job_dict = json.load(cfg)
maxEvents=-1

workdir: 
    job_dict['LocalDir']
    
rule scram:
    params :
        cmsswpath = re.findall( "(.*CMSSW_.*/src/)", snakefile_dir )[0]
    output:
        env = "cmssw_env.sh",
        check = "scramdone.txt"
    shell:
        """
        echo "CMSSW base will be set to {params.cmsswpath}" > {output.check}
        echo "Creating script {output.env}" >> {output.check}
        echo "#!/bin/bash" > {output.env}
        echo "[ -z \"$CMS_PATH\" ] && source /cvmfs/cms.cern.ch/cmsset_default.sh" >> {output.env}
	    echo "export SITECONFIG_PATH=/cvmfs/cms.cern.ch/SITECONF/T2_CH_CERN" >> {output.env}
        echo "cd {params.cmsswpath}" >> {output.env}
        echo "eval \\`scramv1 runtime -sh\\`" >> {output.env}
        echo "cd -" >> {output.env}
        source {output.env}
        echo "CMS_PATH=$CMS_PATH" >> {output.check}
        echo "CMSSW_BASE=$CMSSW_BASE" >> {output.check}
        """

rule step_RAW2DIGI:
    params:        
        run = f'{job_dict["Run"]}',
        lumi = f'{job_dict["LumiSection"]}',
        era = f'{job_dict["RecoEra"]}',
        inputFiles = ','.join(job_dict["Inputs"][1:]),
        inputTrigFiles = ','.join( [job_dict["Inputs"][0],] ),
        yamls = f'\"{job_dict["YAMLs"]}\"',
        cfg = "$CMSSW_BASE/src/HGCalCommissioning/Configuration/test/step_RAW2DIGI.py",
        maxEvents = maxEvents
    input: 
        env = rules.scram.output.env
    output:
        root = "RAW2DIGI.root",
        report = "FrameworkJobReport_RAW2DIGI.xml"
    shell: 
        """
        source {input.env}
        cmsRun -j {output.report} \
               {params.cfg} run={params.run} lumi={params.lumi} era={params.era} \
               files={params.inputFiles} inputTrigFiles={params.inputTrigFiles} yamls={params.yamls} \
               output={output.root} maxEvents={params.maxEvents}
        #CMSSW appends numEvents to the file name if maxEvents!=-1
        #force the file name to be always the same
        #targetout={output.root}
        #localout=${{targetout/.root/*.root}}
        #mv -v $localout $targetout
        """

rule step_DQM:
    params:
        run = f'{job_dict["Run"]}',
        era = f'{job_dict["RecoEra"]}',
        cfg = "$CMSSW_BASE/src/HGCalCommissioning/Configuration/test/step_DQM.py",
        dqm = f'DQM_V0001_HGCAL_R{job_dict["Run"]}.root'
    input: 
        env = rules.scram.output.env,
        root = rules.step_RAW2DIGI.output.root
    output:
        report = "FrameworkJobReport_DQM.xml",
        root = "DQM.root"
    shell: 
        """
        source {input.env}
        cmsRun -j {output.report} \
               {params.cfg} run={params.run} era={params.era} files=file:{input.root} maxEvents=-1
        mv {params.dqm} {output.root}
        """

rule step_NANO:
    params:
        run = f'{job_dict["Run"]}',
        era = f'{job_dict["RecoEra"]}',
        cfg = "$CMSSW_BASE/src/HGCalCommissioning/Configuration/test/step_NANO.py"
    input: 
        env = rules.scram.output.env,
        root = rules.step_RAW2DIGI.output.root
    output:
        report = "FrameworkJobReport_NANO.xml",
        root = "NANO.root"
    shell: 
        """
        source {input.env}
        cmsRun -j {output.report} \
               {params.cfg} run={params.run} era={params.era} files=file:{input.root} skipRecHits=true maxEvents=-1
        """

rule step_JobReport:
    params:
        cfgurl = cfgurl
    input: 
        env = rules.scram.output.env,
        report_RAW2DIGI = {rules.step_RAW2DIGI.output.report},
        report_DQM = {rules.step_DQM.output.report},
        report_NANO = {rules.step_NANO.output.report}        
    output:
        report = "jobreport.json"
    shell: 
        """
        source {input.env}
        python $CMSSW_BASE/src/HGCalCommissioning/Configuration/test/jobReportBuilder.py \
            --initialcfg {params.cfgurl} \
            --fwkreports {input.report_RAW2DIGI},{input.report_DQM},{input.report_NANO} \
            -o {output.report}
        """

rule step_DQM_upload:
    params:
        run = f'{job_dict["Run"]}',
        dqmtag = f'V{job_dict["LumiSection"]:04d}_HGCAL_R{job_dict["Run"]:09d}'
    input:
        env = rules.scram.output.env,
        root = rules.step_DQM.output.root
    output:
        report = "dqmupload.done"
    shell: 
        """
        source {input.env}
        cp {input.root} DQM_{params.dqmtag}.root
        #visDQMUpload.py http://hgc-vm-2024.cern.ch:8070/dqm/online-dev DQM_{params.dqmtag}.root > {output.report}
        echo "Upload is disabled for the moment while validating" > {output.report}
	rm DQM_{params.dqmtag}.root
        """

rule endstep:
     input :
           rules.step_RAW2DIGI.output,
           rules.step_DQM.output,
           rules.step_NANO.output,
           rules.step_JobReport.output
     params:
        outdir = f'{job_dict["OutputDir"]}'.replace('/eos/cms/','root://eoscms.cern.ch//'),
        mycopy = "cp -v" if f'{job_dict["OutputDir"]}'.find('/eos/cms/')<0 else "eos cp",
        tag = f'{job_dict["Run"]}_{job_dict["LumiSection"]}',
        dqmtag = f'V{job_dict["LumiSection"]:04d}_HGCAL_R{job_dict["Run"]:09d}'
     output:
        log = "endstep.txt"
     shell:
        """
        mkdir -p {params.outdir}/reports
        mkdir -p {params.outdir}/dqm
        #ROOT files
        {params.mycopy} {rules.step_RAW2DIGI.output.root} {params.outdir}/RAW2DIGI_{params.tag}.root > {output.log}
        {params.mycopy} {rules.step_DQM.output.root} {params.outdir}/DQM_{params.dqmtag}.root >> {output.log}
        {params.mycopy} {rules.step_NANO.output.root} {params.outdir}/NANO_{params.tag}.root >> {output.log}
        #Reports (copy only the final report)
        #{params.mycopy} {rules.step_RAW2DIGI.output.report} {params.outdir}/reports/FrameworkJobReport_step_RAW2DIGI_{params.tag}.xml >> {output.log}
        #{params.mycopy} {rules.step_DQM.output.report} {params.outdir}/reports/FrameworkJobReport_step_DQM_{params.tag}.xml >> {output.log}
        #{params.mycopy} {rules.step_NANO.output.report} {params.outdir}/reports/FrameworkJobReport_step_NANO_{params.tag}.xml >> {output.log}
        {params.mycopy} {rules.step_JobReport.output.report} {params.outdir}/reports/job_{params.tag}.json >> {output.log}
        """

rule all:
    input:
        rules.scram.output,
        rules.step_RAW2DIGI.output,
        rules.step_DQM.output,
        rules.step_NANO.output,
        rules.step_DQM_upload.output,
        rules.endstep.output
